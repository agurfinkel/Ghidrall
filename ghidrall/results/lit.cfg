# -*- Python -*-

import os
import sys
import re
import platform

try:
   import lit.util
   import lit.formats
except ImportError:
   pass

config.name = 'pathanalyzer'

config.test_format = lit.formats.ShTest(execute_external=False)
config.suffixes = ['.cpp', '.cc']
config.excludes = []

config.test_source_root = os.path.dirname(__file__)
config.test_exec_root = lit_config.params.get('test_dir', '.')
config.useProgressBar= True
config.showOutput= True

def addEnv(name):
   if name in os.environ:
      config.environment[name] = os.environ[name]


def isexec(fpath):
    if fpath == None:
        return False
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)


def which (cmd):
   return lit.util.which(cmd, config.environment['PATH'])


addEnv('HOME')
addEnv('PWD')

repositoryRoot = os.path.dirname(os.path.abspath(__file__))
lit_config.note('Repository root is {}'.format(repositoryRoot))

seahorn_cmd = which('seahorn')
if not isexec(seahorn_cmd):
   lit_config.fatal('Could not find the seahorn executable at {}'
                    .format(seahorn_cmd))
else:
   lit_config.note('Found seahorn: {}'.format(seahorn_cmd))

config.substitutions.append(('%seahorn', seahorn_cmd))

sea_cmd = which('sea')
if not isexec(sea_cmd):
   lit_config.fatal('Could not find the sea executable at {}'
                    .format(sea_cmd))
else:
   lit_config.note('Found sea: {}'.format(sea_cmd))

config.substitutions.append(('%sea', sea_cmd))

seatest_cmd = os.path.join(repositoryRoot, 'seatest.py')
if not isexec(seatest_cmd):
   lit_config.fatal('Could not find the stest executable at {}'
                    .format(seatest_cmd))
else:
   lit_config.note('Found stest: {}'.format(seatest_cmd))

config.substitutions.append(('%stest', seatest_cmd))
