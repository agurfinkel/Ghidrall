<function>
  <return>
    <type>undefined8</type>
    <size>8</size>
  </return>
  <name>main</name>
  <address>711</address>
  <args>
    
  </args>
  <locals>
    <var>
      <type>char</type>
      <size>1</size>
      <name>cVar1</name>
    </var>
    <var>
      <type>uint32_t</type>
      <size>4</size>
      <name>uVar2</name>
    </var>
    <var>
      <type>uint32_t</type>
      <size>4</size>
      <name>uVar3</name>
    </var>
    <var>
      <type>uint32_t</type>
      <size>4</size>
      <name>uVar4</name>
    </var>
    <var>
      <type>int32_t</type>
      <size>4</size>
      <name>iVar5</name>
    </var>
    <var>
      <type>int64_t</type>
      <size>8</size>
      <name>var_ch</name>
    </var>
  </locals>
  <block_graph>
    <block>
      <label>
        <address>711</address>
      </label>
      <ops>
        <op>
          <opname>CALL</opname>
          <inputs>
            <input>
              <symbol>sym.path_start</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>CALL</opname>
          <output>
            <symbol>uVar2</symbol>
            <type>uint32_t</type>
            <size>4</size>
          </output>
          <inputs>
            <input>
              <symbol>sym.imp.rand</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>CALL</opname>
          <output>
            <symbol>uVar3</symbol>
            <type>uint32_t</type>
            <size>4</size>
          </output>
          <inputs>
            <input>
              <symbol>sym.imp.rand</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>CALL</opname>
          <output>
            <symbol>uVar4</symbol>
            <type>uint32_t</type>
            <size>4</size>
          </output>
          <inputs>
            <input>
              <symbol>sym.imp.rand</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>CALL</opname>
          <output>
            <symbol>iVar5</symbol>
            <type>int32_t</type>
            <size>4</size>
          </output>
          <inputs>
            <input>
              <symbol>sym.imp.rand</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>INT_NOTEQUAL</opname>
          <output>
            <symbol>register0x00000206</symbol>
            <type>bool</type>
            <size>1</size>
          </output>
          <inputs>
            <input>
              <symbol>iVar5</symbol>
              <type>int32_t</type>
              <size>4</size>
            </input>
            <input>
              <symbol>0</symbol>
              <type>int32_t</type>
              <size>4</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>CALL</opname>
          <output>
            <symbol>cVar1</symbol>
            <type>char</type>
            <size>1</size>
          </output>
          <inputs>
            <input>
              <symbol>sym.imp.rand</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>INT_SEXT</opname>
          <output>
            <symbol>register0x00000038</symbol>
            <type>int32_t</type>
            <size>4</size>
          </output>
          <inputs>
            <input>
              <symbol>cVar1</symbol>
              <type>char</type>
              <size>1</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>INT_ZEXT</opname>
          <output>
            <symbol>register0x00000008</symbol>
            <type>uint64_t</type>
            <size>8</size>
          </output>
          <inputs>
            <input>
              <symbol>register0x00000206</symbol>
              <type>bool</type>
              <size>1</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>INT_ZEXT</opname>
          <output>
            <symbol>register0x00000010</symbol>
            <type>uint64_t</type>
            <size>8</size>
          </output>
          <inputs>
            <input>
              <symbol>uVar4</symbol>
              <type>uint32_t</type>
              <size>4</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>INT_ZEXT</opname>
          <output>
            <symbol>register0x00000030</symbol>
            <type>uint64_t</type>
            <size>8</size>
          </output>
          <inputs>
            <input>
              <symbol>uVar3</symbol>
              <type>uint32_t</type>
              <size>4</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>CAST</opname>
          <output>
            <symbol>unique0x10000087</symbol>
            <type>uint32_t</type>
            <size>4</size>
          </output>
          <inputs>
            <input>
              <symbol>register0x00000038</symbol>
              <type>int32_t</type>
              <size>4</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>INT_ZEXT</opname>
          <output>
            <symbol>register0x00000080</symbol>
            <type>uint64_t</type>
            <size>8</size>
          </output>
          <inputs>
            <input>
              <symbol>unique0x10000087</symbol>
              <type>uint32_t</type>
              <size>4</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>INT_ZEXT</opname>
          <output>
            <symbol>register0x00000038</symbol>
            <type>uint64_t</type>
            <size>8</size>
          </output>
          <inputs>
            <input>
              <symbol>uVar2</symbol>
              <type>uint32_t</type>
              <size>4</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>CALL</opname>
          <inputs>
            <input>
              <symbol>sym.func_int__int__int__bool__char</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
            <input>
              <symbol>register0x00000038</symbol>
              <type>uint64_t</type>
              <size>8</size>
            </input>
            <input>
              <symbol>register0x00000030</symbol>
              <type>uint64_t</type>
              <size>8</size>
            </input>
            <input>
              <symbol>register0x00000010</symbol>
              <type>uint64_t</type>
              <size>8</size>
            </input>
            <input>
              <symbol>register0x00000008</symbol>
              <type>uint64_t</type>
              <size>8</size>
            </input>
            <input>
              <symbol>register0x00000080</symbol>
              <type>uint64_t</type>
              <size>8</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>COPY</opname>
          <output>
            <symbol>register0x00000000</symbol>
            <type>undefined8</type>
            <size>8</size>
          </output>
          <inputs>
            <input>
              <symbol>0</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
          </inputs>
        </op>
        <op>
          <opname>RETURN</opname>
          <inputs>
            <input>
              <symbol>0</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
            <input>
              <symbol>register0x00000000</symbol>
              <type>undefined8</type>
              <size>8</size>
            </input>
          </inputs>
        </op>
      </ops>
      <out_branches>
      </out_branches>
    </block>
  </block_graph>
</function>
